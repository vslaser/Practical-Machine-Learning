qqnorm(means_exponentials, col=2)
qqline(means_exponentials, col = 5)
qqnorm(means_exponentials, col=2)
qqline(means_exponentials, col = 75)
qqnorm(means_exponentials, col=2)
qqline(means_exponentials, col = 3)
qqnorm(means_exponentials, col=2)
qqline(means_exponentials, col = 4)
qqnorm(means_exponentials, col=2)
qqline(means_exponentials, col = 1)
lambda <- 0.2
n <- 40
sims <- 20
sims_exponentials <- replicate(sims, rexp(n, lambda))
means_exponentials <- apply(sims_exponentials, 2, mean)
sample_mean <- mean(means_exponentials)
sample_mean
Theoretical_mean <- 1/lambda
Theoretical_mean
hist(means_exponentials, xlab = "Mean", main = "Illustration of Means")
abline(v = sample_mean, col = "blue")
abline(v = Theoretical_mean, col = "red")
sd_sample <- sd(means_exponentials)
var_sample <- (sd_sample^2)
var_sample
sd_theoretical <- (1/lambda)/(sqrt(n))
var_theoretical <- (sd_theoretical^2)
var_theoretical
# Comparison
abs(sd_sample-sd_theoretical)
xfit <- seq(min(means_exponentials), max(means_exponentials), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
hist(means_exponentials,breaks=n,prob=T,col="light blue",xlab = "Means",main="Density of means",ylab="Density")
lines(xfit, yfit, pch=22, col="black", lty=5)
qqnorm(means_exponentials, col=2)
qqline(means_exponentials, col = 1)
xfit <- seq(min(means_exponentials), max(means_exponentials), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
hist(means_exponentials,breaks=n,prob=T,col="light blue",xlab = "Means",main="Density of means",ylab="Density")
lines(xfit, yfit, pch=22, col="black", lty=5)
library(ToothGrowth)
data("ToothGrowth")
str(ToothGrowth)
unique(ToothGrowth$supp)
unique(ToothGrowth$dose)
plot(ToothGrowth$len,ToothGrowth$supp)
plot(ToothGrowth$supp,ToothGrowth$len)
plot(ToothGrowth$dose,ToothGrowth$len)
boxplot(ToothGrowth$dose,ToothGrowth$len)
boxplot(ToothGrowth$dose,log(ToothGrowth$len)
)
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) + xlab("Dose Amount") + ylab("Tooth Length") + facet_grid(~ supp) + ggtitle("Tooth Length vs. Dose Amount \nby Delivery Method") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
library(ggplor2)
library(ggplot2)
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) + xlab("Dose Amount") + ylab("Tooth Length") + facet_grid(~ supp) + ggtitle("Tooth Length vs. Dose Amount \nby Delivery Method") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose, group=TRUE)) + xlab("Dose Amount") + ylab("Tooth Length") + facet_grid(~ supp) + ggtitle("Tooth Length vs. Dose Amount \nby Delivery Method") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ggplot(aes(x=dose, y=len, group=TRUE), data=ToothGrowth) + geom_boxplot(aes(fill=dose, group=TRUE)) + xlab("Dose Amount") + ylab("Tooth Length") + facet_grid(~ supp) + ggtitle("Tooth Length vs. Dose Amount \nby Delivery Method") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
pairs(ToothGrowth)
plot(ToothGrowth$supp,ToothGrowth$len)
plot(ToothGrowth$dose,ToothGrowth$len)
head(ToothGrowth)
vcresults = subset(ToothGrowth, ToothGrowth$supp == "VC")
head(vcresults)
summary(vsresults)
summary(vcresults)
plot(vcresults$dose, vcresults$len)
ojresults = subset(ToothGrowth, ToothGrowth$supp == "OJ")
plot(ojresults$dose, ojresults$len)
plot(vcresults$len, ojresults$len)
mean(vcresults$len)
mean(ojresults$len)
sd(vcresults$len)
sd(ojresults$len)
hist(vcresults)
hist(vcresults$len)
hist(ojresults$len)
hist(vcresults$len)
hist(ojresults$len)
ToothGrowth$dose<-as.factor(ToothGrowth$dose)
ggplot(aes(x=dose, y=len, group=TRUE), data=ToothGrowth) + geom_boxplot(aes(fill=dose, group=TRUE)) + xlab("Dose Amount") + ylab("Tooth Length") + facet_grid(~ supp) + ggtitle("Tooth Length vs. Dose Amount \nby Delivery Method") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=supp)) + xlab("Supplement Delivery") + ylab("Tooth Length") + facet_grid(~ dose) + ggtitle("Tooth Length vs. Delivery Method \nby Dose Amount") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
t.test(len~supp,data=ToothGrowth)
mean(ToothGrowth$len)
ggplot(aes(x=dose, y=len, group=TRUE), data=ToothGrowth) + geom_boxplot(aes(fill=dose, group=TRUE)) + xlab("Dose Amount") + ylab("Tooth Length") + facet_grid(~ supp) + ggtitle("Tooth Length vs. Dose Amount \nby Delivery Method") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
library(datasets)
library(ggplot2)
head(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
unique(ToothGrowth$dose)
unique(ToothGrowth$supp)
unique(ToothGrowth$len)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
sapply(split(ToothGrowth$len, ToothGrowth$supp), mean)
ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=supp))+
xlab("Supplement type") +ylab("Tooth length")
sapply(split(ToothGrowth$len, ToothGrowth$dose), mean)
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) +
xlab("Dose in miligrams") +ylab("Tooth length")
sapply(split(ToothGrowth$len, ToothGrowth$supp), mean)
sapply(split(ToothGrowth$len, ToothGrowth$supp), mean)
ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=supp))+
xlab("Supplement type") +ylab("Tooth length")
sapply(split(ToothGrowth$len, ToothGrowth$dose), mean)
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) +
xlab("Dose in miligrams") +ylab("Tooth length")
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=supp)) +
xlab("Dose in miligrams") +ylab("Tooth length")
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_histogram(aes(fill=supp)) +
xlab("Dose in miligrams") +ylab("Tooth length")
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_plot(aes(fill=supp)) +
xlab("Dose in miligrams") +ylab("Tooth length")
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_bar(aes(fill=supp)) +
xlab("Dose in miligrams") +ylab("Tooth length")
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_bar(aes(fill=mean(supp)) +
xlab("Dose in miligrams") +ylab("Tooth length")
)
ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) +
xlab("Dose in miligrams per Supplement") +ylab("Tooth length")
ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) +
xlab("Dose in miligrams per Supplement") +ylab("Tooth length")
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=supp)) +
xlab("Dose in miligrams per Supplement") +ylab("Tooth length")
sd(split(ToothGrowth$len, ToothGrowth$supp))
x<- subset(ToothGrowth, ToothGrowth$supp)
x<- subset(ToothGrowth, ToothGrowth$supp=="VC")
sd(x$len)
y <- subset(ToothGrowth, ToothGrowth$supp=="OJ")
sd(y$len)
hist(x$len)
hist(y$len)
par(mfrow= c(1,2))
hist(x$len, main = "Vitamin C")
hist(y$len, main = "Orange Juice")
par(mfrow= c(1,2))
hist(x$len, main = "Vitamin C", xlab = "Length")
hist(y$len, main = "Orange Juice", xlab = "Length")
summary(ToothGrowth)
sapply(split(ToothGrowth$len, ToothGrowth$supp), var)
t.test(ToohGrowth$len[supp=="OJ"], ToothGrowth$len[supp=="VC"], paired = FALSE, var.equal = FALSE)
t.test(ToothGrowth$len[supp=="OJ"], ToothGrowth$len[supp=="VC"], paired = FALSE, var.equal = FALSE)
t.test(ToothGrowth$len[ToothGrowth$supp=="OJ"], ToothGrowth$len[ToothGrowth$supp=="VC"], paired = FALSE, var.equal = FALSE)
t.test(ToothGrowth$len[ToothGrowth$dose==2], ToothGrowth$len[ToothGrowth$dose==1], ToothGrowth$len[ToothGrowth$dose==0.5], paired = FALSE, var.equal = TRUE)
t.test(ToothGrowth$len ~ ToothGrowth$dose, paired=FALSE, var.equal=TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose==2], ToothGrowth$len[ToothGrowth$dose==1], paired = FALSE, var.equal = FALSE)
t.test(ToothGrowth$len[ToothGrowth$dose==2], ToothGrowth$len[ToothGrowth$dose==1], paired = FALSE, var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose==0.5], ToothGrowth$len[ToothGrowth$dose==1], paired = FALSE, var.equal = FALSE)
t.test(ToothGrowth$len[ToothGrowth$dose==1], ToothGrowth$len[ToothGrowth$dose==2], paired = FALSE, var.equal = FALSE)
install.packages("UsingR")
install.packages("reshape")
library("UsingR")
data("galton")
library(reshape)
library("ggplot2")
str(galton)
g = ggplot(long, aes(x=value, fill = variable))
long = melt(galton)
g = ggplot(long, aes(x=value, fill = variable))
g = g+ geom_histogram(colour = "black", binwidth = 1)
g = g + facet_grid(.~variable)
g
library(manipulate)
install.packages("manipulate")
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child-mu)^2)
g<- ggplot(galton, aes(x=child))+ geom_histogram(fill = "salmon",
colour = "black, binwidth =1")
g <- g+geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = o.5))
myHist <- function(mu){
mse <- mean((galton$child-mu)^2)
g<- ggplot(galton, aes(x=child))+ geom_histogram(fill = "salmon",
colour = "black, binwidth =1")
g <- g+geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
mse <- mean((galton$child-mu)^2)
g<- ggplot(galton, aes(x=child))+ geom_histogram(fill = "salmon",
colour = "black", binwidth =1)
g <- g+geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(swirl)
install_from_swirl("Regression Models")
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
est(ols.slope,ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varRes,varEst)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist,attenu)
mean(efit$residuals)
cov(attenu$mag~efit$residuals)
cov(attenu$mag)
cov(efit$residual,attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gpa_nor~gch_nor)
l_nor <- lm(gch_nor~gpa_nor)
x = c(0.18, -1.54, 0.42, 0.95)
w = c(2, 1, 3, 1)
weighted.mean(x,w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ 0 + x)$coeff
data(mtcars)
summary(lm(mpg~weight, mtcars))
summary(lm(mpg~wt, mtcars))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)$coef
library(swirl)
swirl()
fit <- lm(child~parent, data = galton)
sqrt(fit$residuals/(928-2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(928-2))
qrt(deviance(fit)/(n-2))
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- sum(fit$residual^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
(cor(galton$child,galton$parent)^2)
cor(galton$parent,galton$child)^2
ones <- rep(1,nrow(galton))
lm(child~ones+parent-1, galton)
lm(child~parent, galton)
lm(child~1,galton)$intercept - 68.09
swirl()
lm(child~1,galton)$intercept - 68.09
swirl()
summary(lm(child~1, galton))$intercept - 68.09
swirl()
1
swirl()
summary(lm(child~1, galton))$coefficient - 68.09
swirl()
summary(lm(child~1, galton))$coefficient - 68.09
swirl()
lm(child~1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility~.,swiss)
summary(all)
require(datasets)
data(swiss)
?swiss
require(GGally)
require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
require(ggplot)
require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
install.packages("GGally")
install.packages("GGally")
require(GGally)
require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
g
data(mtcars)
head(mtcars)
str(mtcars)
??mtcars
library(ggplot2)
data("mtcars")
head(mtcars)
str(mtcars)
## Data Transformation ofr factor variables that are shown as number variables in the dataset
mtcars$cyl  <- factor(mtcars$cyl)
mtcars$vs   <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am   <- factor(mtcars$am,labels=c("Automatic","Manual"))
boxplot(mpg ~ am, data = mtcars, col = (c("red","blue")), ylab = "Mileage (MPG)", xlab = "Transmission Type")
boxplot(mpg ~ am, data = mtcars, col = (c("indianred","turquoise")), ylab = "Mileage (MPG)", xlab = "Transmission Type")
pairs(mpg ~ ., data = mtcars)
fit1 <- lm(mpg ~ am, data = mtcars)
fit2 <- lm(mpg~am + cyl + disp + hp + drat + wt + vs, data = mtcars)
fit3 <- lm(mpg ~. , data - mtcars)
fit3 <- lm(mpg ~. , data = mtcars)
```{r, echo=TRUE, message=FALSE, warning=FALSE}
anova(fit1,fit2,fit3)
summary(fit1)
summary(fit2)
par(mfrow = c(2,2))
plot(fit1)
leverage <- hatvalues(fit1)
tail(sort(leverage),3)
summary(fit1)
summary(fit2)
par(mfrow = c(2,2))
plot(fit2)
leverage <- hatvalues(fit2)
tail(sort(leverage),3)
influential <- dfbetas(fit2)
tail(sort(influential[,6]),3)
leverage <- hatvalues(fit2)
tail(sort(leverage),5)
leverage <- hatvalues(fit1)
tail(sort(leverage),5)
t.test(mpg ~ am, data = mtcars)
summary(fit2)
---
_
install.packages("caret")
library(caret)
library(caret)
library(Kernlab)
library(kernlab)
data(spam)
inTrain = createDataPartition(y=spam$type, p=0.75, list = FALSE)
training = spam[inTrain,]
testing = spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit = train(type~.,data=training,method = "glm")
modelFit
modelFit$finalModel
predictions = predict(modelFit, newdata = testing)
predictions
confusionMatrix(predictions,testing$type)
data("iris")
library(ggplot2)
names(iris)
table(iris$Species)
library(caret)
inTrain = createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training = iris[inTrain,]
testing = iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit = train(Species~.,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rpart)
fancyRpartPlot(modFit$finalModel)
library(rpart)				        # Popular decision tree algorithm
library(rattle)					# Fancy tree plot
library(rpart.plot)				# Enhanced tree plots
library(RColorBrewer)				# Color selection for fancy tree plot
library(party)					# Alternative decision tree algorithm
library(partykit)
install.packages("Rpart.plot")
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
library(rpart.plot)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata = testing)
library(caret)
library(rpart)
install.packages("randomForest")
install.packages("RColorBrewer")
install.packages("rattle")
library(rpart.plot)
library(randomForests)
library(RColorBrewer)
library(rattle)
library(ggplot2)
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(url=train_url, destfile="training.csv")
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url=test_url, destfile="testing.csv")
train <- read.csv("training.csv", na.strings=c("NA","#DIV/0!",""))
test <- read.csv("testing.csv", na.strings=c("NA","#DIV/0!",""))
names(train)
str(train)
summary(train)
summary(train$classe)
set.seed(100)
inTrain <- createDataPartition(y=train$classe, p=0.7, list=F)
train1 <- train[inTrain, ]
train2 <- train[-inTrain, ]
# remove variables with nearly zero variance
nzv <- nearZeroVar(train1)
train1 <- train1[, -nzv]
train2 <- train2[, -nzv]
# remove variables that are almost always NA
mostlyNA <- sapply(train1, function(x) mean(is.na(x))) > 0.95
train1 <- train1[, mostlyNA==F]
train2 <- train2[, mostlyNA==F]
# remove variables that don't make intuitive sense for prediction (X, user_name, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp), which happen to be the first five variables
ptrain1 <- ptrain1[, -(1:5)]
ptrain2 <- ptrain2[, -(1:5)]
fitControl <- trainControl(method="cv", number=3, verboseIter=F)
fit <- train(classe ~ ., data=train1, method="rf", trControl=fitControl)
train1 <- train1[, -(1:5)]
train2 <- train2[, -(1:5)]
fitControl <- trainControl(method="cv", number=3, verboseIter=F)
fit <- train(classe ~ ., data=train1, method="rf", trControl=fitControl)
set.seed(100)
inTrain <- createDataPartition(y=train$classe, p=0.7, list=F)
train1 <- train[inTrain, ]
train2 <- train[-inTrain, ]
nzv <- nearZeroVar(train1)
train1 <- train1[, -nzv]
train2 <- train2[, -nzv]
mostlyNA <- sapply(train1, function(x) mean(is.na(x))) > 0.95
train1 <- train1[, mostlyNA==F]
train2 <- train2[, mostlyNA==F]
train1 <- train1[, -(1:5)]
train2 <- train2[, -(1:5)]
fitControl <- trainControl(method="cv", number=3, verboseIter=F)
library(randomForest)
fit <- train(classe ~ ., data=train1, method="rf", trControl=fitControl)
fit$finalModel
preds <- predict(fit, newdata=train2)
confusionMatrix(train2$classe, preds)
setwd("D:\\DataScienceCoursera\\Practical Machine Learning")
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(RColorBrewer)
library(rattle)
library(ggplot2)
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(url=train_url, destfile="training.csv")
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url=test_url, destfile="testing.csv")
train <- read.csv("training.csv", na.strings=c("NA","#DIV/0!",""))
test <- read.csv("testing.csv", na.strings=c("NA","#DIV/0!",""))
str(train)
summary(train)
summary(train$classe)
set.seed(100)
inTrain <- createDataPartition(y=train$classe, p=0.7, list=F)
train1 <- train[inTrain, ]
train2 <- train[-inTrain, ]
nzv <- nearZeroVar(train1)
train1 <- train1[, -nzv]
train2 <- train2[, -nzv]
NAs <- sapply(train1, function(x) mean(is.na(x))) > 0.95
train1 <- train1[, NAs==F]
train2 <- train2[, NAs==F]
train1 <- train1[, -(1:5)]
train2 <- train2[, -(1:5)]
crossvalidate <- trainControl(method="cv", number=3, verboseIter=F)
fit <- train(classe ~ ., data=train1, method="rf", trControl=crossvalidate)
fit$finalModel
prediction <- predict(fit, newdata=train2)
confusionMatrix(train2$classe, prediction)
nzv <- nearZeroVar(train)
train <- train[, -nzv]
test <- test[, -nzv]
NAs <- sapply(train, function(x) mean(is.na(x))) > 0.95
train <- train[, NAs==F]
test <- test[, NAs==F]
train <- train[, -(1:5)]
test <- test[, -(1:5)]
crossvalidate <- trainControl(method="cv", number=3, verboseIter=F)
fit <- train(classe ~ .,data = train, method="rf", trControl=crossvalidate)
fit$finalModel
predictions <- predict(fit, newdata=test)
test$classepredictions <- predictions
Output <- data.frame(Problem_ID,Prediction)
Output <- data.frame()
str(test)
Output$problem_id <- test$problem_id
output$classepredictions <- test$classepredictions
Output$problem_id <- test$problem_id
Output <- data.frame(Problem_ID = test$problem_id,Predictions = test$classepredictions)
str(Output)
write.csv(Output, "Output.csv")
---
